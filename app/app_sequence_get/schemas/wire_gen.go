// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package schemas

import (
	"github.com/bianhuOK/api_client/internal/domain"
	"github.com/bianhuOK/api_client/internal/domain/service"
	"github.com/bianhuOK/api_client/internal/infra"
	"github.com/bianhuOK/api_client/internal/infra/configs"
	"github.com/bianhuOK/api_client/internal/infra/persistence"
	"github.com/bianhuOK/api_client/internal/infra/repo"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeSequenceApp() (*SequenceController, error) {
	rangeConfig, err := configs.LoadRangeConfig()
	if err != nil {
		return nil, err
	}
	databaseOptionConfig, err := configs.LoadDbOptionConfig()
	if err != nil {
		return nil, err
	}
	dbProvider := persistence.NewDBProvider(databaseOptionConfig)
	sequenceConfig, err := configs.LoadSequenceConfig()
	if err != nil {
		return nil, err
	}
	sequenceRepository, err := repo.NewSequenceRepository(dbProvider, sequenceConfig)
	if err != nil {
		return nil, err
	}
	sequenceDbTransactionManager, err := repo.NewSequenceDbTransactionManager(dbProvider, sequenceConfig)
	if err != nil {
		return nil, err
	}
	rangeManager := service.NewRangeManager(sequenceRepository, sequenceDbTransactionManager, rangeConfig)
	preloadManager := service.NewPreloadManager(rangeManager, rangeConfig)
	seqGenerator := service.NewSeqGenerator(rangeConfig, rangeManager, preloadManager)
	sequenceController := NewSeqControlloer(seqGenerator)
	return sequenceController, nil
}

// wire.go:

var SequenceAppSet = wire.NewSet(domain.SequenceServiceSet, infra.SequenceGenerateInfraSet, NewSeqControlloer)
